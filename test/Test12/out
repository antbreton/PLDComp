getid
[a:0x7f8909c02f00, c:0x7f8909c02ec0 ]
[a:0x7f8909c02f00, c:0x7f8909c02ee0 ]
[a:0x7f8909c033d0, c:0x7f8909c030d0  st ]
[a:0x7f8909c03400, c:0x7f8909c02f30  st ]
[a:0x7f8909c02d40, c:0x7f8909c03400  st ]
getid
getid
[a:0x7f8909c02910, c:0x7f8909c02d40 ]
%%%Frontend%%%



PROGRAMME // tableSymb size : 0
	FONCTION	VOID fonction1 // size : 1VAR INT32 z 
	FONCTION	VOID main // size : 2VAR INT32 z VAR INT64 t 
	BEGIN_BLOC // nb instr : 1 - tableSymb size : 3
		BLOC_IF ( EGAL VAL 1  == VAL 2 )

		BEGIN_BLOC // nb instr : 1 - tableSymb size : 0
			APPEL FONCTION ID fonction1 VAL 2 
		END_BLOC
		BLOC_ELSE
			BLOC_IF ( VAL 1 )

			BEGIN_BLOC // nb instr : 1 - tableSymb size : 0
				APPEL FONCTION ID fonction1 VAL 2 
			END_BLOC
			BLOC_ELSE
			BEGIN_BLOC // nb instr : 1 - tableSymb size : 0
				APPEL FONCTION ID fonction1 VAL 2 
			END_BLOC
	END_BLOC
END_PROGRAMME

%%%Backend%%%
getid
getid
getid
getid
NI IF NI ELSE
CREATION BLOC : main
BasicBlock::listeInstructionsAST->size() 1
getid
getid
getid
IR::genererIR
CFG::genererIR
CFG::genererIR
BB:genererIR()::listeInstructionsAST->size()1
------ FOR ----------  main
INSTRUCTION STRUCTURE DE CONTROLE
IR Val
IR Val
NI IF NI ELSE
CREATION BLOC : blocIF_0
BasicBlock::listeInstructionsAST->size() 1
NI IF NI ELSE
CREATION BLOC : blocELSE_0
NI IF NI ELSE
CREATION BLOC : blocAfter_0
BREAKmain
BB:genererIR()::listeInstructionsAST->size()1
------ FOR ----------  blocIF_0
------ IF ----------
IR AppelFonction
IR Val
------ FIN IF ----------
------ FIN FOR ----------
BB:genererIR()::listeInstructionsAST->size()0
BB:genererIR()::listeInstructionsAST->size()0

GEN_PROLOGUE
getid
getid


.text        
.globl main 
.type main, @function

main:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $56, %rsp 
    mov    %rdi, -16(%rbp) 
    mov    %rsi, -8(%rbp) 

    movq   $1, -24(%rbp)
    movq   $2, -32(%rbp)
    movq    -24(%rbp), %rax 
    xor    -32(%rbp), %rax
    cmpq   $0, %rax 
    sete   %al 
    movzbq %al, %rax 
    movq    %rax, -40(%rbp) 
    jne blocELSE_0
blocIF_0:
    movq   $2, -56(%rbp)
    mov    -56(%rbp), %rdi 
    call   fonction1
    jmp blocAfter_0
blocELSE_0:
blocAfter_0:

    leave
    ret


Fin de l'analyse du programme
