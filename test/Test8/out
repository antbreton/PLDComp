[a:0x7febd9402e40, c:0x7febd9402de0 ]
[a:0x7febd9402e40, c:0x7febd9402e20 ]
[a:0x7febd9402f80, c:0x7febd9402f40 ]
[a:0x7febd9402f80, c:0x7febd9402f60 ]
[a:0x7febd9403000, c:0x7febd9402e70  st ]
[a:0x7febd9402c00, c:0x7febd9403000  st ]
getid
getid
[a:0x7febd9402930, c:0x7febd9402c00 ]
%%%Frontend%%%



PROGRAMME // tableSymb size : 0
	FONCTION	VOID main // size : 2VAR INT32 z VAR INT64 t 
	BEGIN_BLOC // nb instr : 3 - tableSymb size : 2
		AFFECTATION ID z  = VAL 5  
		AFFECTATION ID t  = VAL 0  
		BLOC_WHILE ( DIFF ID z  != ID t  ) 
		BEGIN_BLOC // nb instr : 1 - tableSymb size : 0
			AFFECTATION ID t  = ADD ID t  + VAL 1  
		END_BLOC
	END_BLOC
END_PROGRAMME

%%%Backend%%%
Taille liste fonction : 1
getid
test 2
------ FOR ----------
------ IF ----------
IR : Affectation
------ FOR ----------
------ IF ----------
IR : Affectation
------ FOR ----------
getid
getid
Taille liste CFG : 1

GEN_PROLOGUE
genererAssem IRinstr
IRinstr::genererAssembleur 1
genererAssem IRinstr
IRinstr::genererAssembleur 1
.text        
.global main 

main:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $16, %rsp 
    movq    $5, %rax
    movq    %rax, -16(%rbp)
    movq    $0, %rax
    movq    %rax, -8(%rbp)

    leave
    ret


Fin de l'analyse du programme
