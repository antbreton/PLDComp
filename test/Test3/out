[a:0x7fc6bbd00670, c:0x7fc6bbd00630 ]
[a:0x7fc6bbd00670, c:0x7fc6bbd00650 ]
getid
[a:0x7fc6bbd00840, c:0x7fc6bbd006a0  st ]
[a:0x7fc6bbd005a0, c:0x7fc6bbd00840  st ]
getid
getid
[a:0x7fc6bbd002d0, c:0x7fc6bbd005a0 ]
%%%Frontend%%%



PROGRAMME // tableSymb size : 0
	FONCTION	VOID main // size : 2VAR INT32 z VAR INT64 t 
	BEGIN_BLOC // nb instr : 1 - tableSymb size : 2
		BLOC_IF ( EGAL VAL 1  == VAL 1 )

		BEGIN_BLOC // nb instr : 0 - tableSymb size : 1
		END_BLOC
	END_BLOC
END_PROGRAMME

%%%Backend%%%
getid
getid
getid
getid
NI IF NI ELSE
CREATION BLOC : main
BasicBlock::listeInstructionsAST->size() 1
getid
getid
IR::genererIR
CFG::genererIR
BB:genererIR()::listeInstructionsAST->size()1
------ FOR ----------  main
INSTRUCTION STRUCTURE DE CONTROLE
IR Val
IR Val
NI IF NI ELSE
CREATION BLOC : blocIF_0
BasicBlock::listeInstructionsAST->size() 0
NI IF NI ELSE
CREATION BLOC : blocAfter_0
BREAKmain
BB:genererIR()::listeInstructionsAST->size()0
BB:genererIR()::listeInstructionsAST->size()0

GEN_PROLOGUE
getid
getid

.text        
.globl main 
.type main, @function

main:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $40, %rsp 
    mov    %rdi, -16(%rbp) 
    mov    %rsi, -8(%rbp) 

    movq   $1, -24(%rbp)
    movq   $1, -32(%rbp)
    movq    -24(%rbp), %rax 
    xor    -32(%rbp), %rax
    cmpq   $0, %rax 
    sete   %al 
    movzbq %al, %rax 
    movq    %rax, -40(%rbp) 
    jne blocAfter_0
blocIF_0:
    jmp blocAfter_0
blocAfter_0:

    leave
    ret


Fin de l'analyse du programme
