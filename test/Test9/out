[a:0x7fab8bc02c50, c:0x7fab8bc02c10 ]
[a:0x7fab8bc02c50, c:0x7fab8bc02c30 ]
getid
[a:0x7fab8bc02930, c:0x7fab8bc02b60 ]
getid
getid
[a:0x7fab8bc02930, c:0x7fab8bc02ef0 ]
%%%Frontend%%%



PROGRAMME // tableSymb size : 0
	FONCTION	INT64 myFunc // size : 1VAR INT64 a 
	BEGIN_BLOC // nb instr : 1 - tableSymb size : 1		RETURN ADD ID a  + VAL 1 
	END_BLOC
	FONCTION	VOID main // size : 2VAR INT32 z VAR INT64 t 
	BEGIN_BLOC // nb instr : 2 - tableSymb size : 2
		AFFECTATION ID t  = APPEL FONCTION ID myFunc ID t  
		APPEL FONCTION ID myFunct ID t 
	END_BLOC
END_PROGRAMME

%%%Backend%%%
Taille liste fonction : 2
getid
test 2
------ FOR ----------
getid
getid
test 2
------ FOR ----------
------ IF ----------
IR : Affectation
IR AppelFonction
IR Identifiant
!r0
Fin IR : Identifiant
------ FOR ----------
------ IF ----------
IR AppelFonction
IR Identifiant
!r0
Fin IR : Identifiant
getid
getid
Taille liste CFG : 2

GEN_PROLOGUE

GEN_PROLOGUE
genererAssem IRinstr
IRinstr::genererAssembleur 1

genererAssem IRinstr
IRinstr::genererAssembleur 1

genererAssem IRinstr
IRinstr::genererAssembleur 1

genererAssem IRinstr
IRinstr::genererAssembleur 1

genererAssem IRinstr
IRinstr::genererAssembleur 1

.text        
.global main 

myFunc:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $8, %rsp 

    leave
    ret

main:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $16, %rsp 
    movq    -8(%rbp), %rdi
    movq    %rdi, (%rax)
    call   myFunc
    movq    -0(%rbp), %rax
    movq    %rax, -8(%rbp)
    movq    -8(%rbp), %rdi
    movq    %rdi, (%rax)
    call   myFunct

    leave
    ret


Fin de l'analyse du programme
