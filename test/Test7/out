[a:0x7fdf49600160, c:0x7fdf49600120 ]
[a:0x7fdf49600160, c:0x7fdf49600140 ]
getid
[a:0x7fdf49600380, c:0x7fdf49600340 ]
[a:0x7fdf49600380, c:0x7fdf49600360 ]
getid
getid
[a:0x7fdf49600710, c:0x7fdf496003b0  st ]
[a:0x7fdf49600740, c:0x7fdf49600190  st ]
[a:0x7fdf49600090, c:0x7fdf49600740  st ]
[a:0x7fdf49500120, c:0x7fdf49600090 ]
%%%Frontend%%%



PROGRAMME // tableSymb size : 0
	FONCTION	VOID main // size : 0
	BEGIN_BLOC // nb instr : 1 - tableSymb size : 0
		BLOC_IF ( EGAL VAL 1  == VAL 1 )

		BEGIN_BLOC // nb instr : 0 - tableSymb size : 1
		END_BLOC
		BLOC_ELSE
			BLOC_IF ( EGAL VAL 1  == VAL 2 )

			BEGIN_BLOC // nb instr : 0 - tableSymb size : 1
			END_BLOC
			BLOC_ELSE
			BEGIN_BLOC // nb instr : 0 - tableSymb size : 1
			END_BLOC
	END_BLOC
END_PROGRAMME

%%%Backend%%%
getid
getid
NI IF NI ELSE
CREATION BLOC : main
BasicBlock::listeInstructionsAST->size() 1
IR::genererIR
CFG::genererIR
BB:genererIR()::listeInstructionsAST->size()1
------ FOR ----------  main
INSTRUCTION STRUCTURE DE CONTROLE
IR Val
IR Val
NI IF NI ELSE
CREATION BLOC : blocIF_0
BasicBlock::listeInstructionsAST->size() 0
NI IF NI ELSE
CREATION BLOC : blocELSE_0
NI IF NI ELSE
CREATION BLOC : blocAfter_0
BREAKmain
BB:genererIR()::listeInstructionsAST->size()0
BB:genererIR()::listeInstructionsAST->size()0
BB:genererIR()::listeInstructionsAST->size()0

GEN_PROLOGUE

.text        
.globl main 
.type main, @function

main:

    pushq   %rbp 
    movq    %rsp, %rbp 
    subq    $24, %rsp 

    movq   $1, -8(%rbp)
    movq   $1, -16(%rbp)
    movq    -8(%rbp), %rax 
    xor    -16(%rbp), %rax
    cmpq   $0, %rax 
    sete   %al 
    movzbq %al, %rax 
    movq    %rax, -24(%rbp) 
    jne blocELSE_0
blocIF_0:
    jmp blocAfter_0
blocELSE_0:
blocAfter_0:

    leave
    ret


Fin de l'analyse du programme
